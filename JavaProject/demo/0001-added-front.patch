From 17061a7838d2e0199037be6608482d2685551b2a Mon Sep 17 00:00:00 2001
From: Georgy Voronov <g.voronov@payment-guide.ru>
Date: Tue, 2 Jul 2024 12:10:41 +0200
Subject: [PATCH] added front

---
 .../com/example/main/LibraryApplication.java  |   5 -
 .../ControllerAuthorsWithBooksMethods.java    |   5 +
 .../only_for_books/ControllerBookFind.java    |   4 +
 .../example/main/dao/RepositoryBookFile.java  |   9 +
 .../java/com/example/main/entity/Book.java    |  12 +-
 .../com/example/main/entity/BookFile.java     |   5 +-
 .../main/entity/enums/EvaluationOfBook.java   |  22 +-
 .../com/example/main/entity/enums/Genre.java  |  20 +-
 .../main/entity/enums/ReadingStatus.java      |  15 +-
 .../com/example/main/front/AddBookVIew.java   | 165 ++++++++++
 .../com/example/main/front/AuthorView.java    | 192 +++++++++++
 .../java/com/example/main/front/BookView.java | 310 ++++++++++++++++++
 .../java/com/example/main/front/MainView.java |  42 +--
 .../com/example/main/front/TextConstants.java |  19 ++
 .../com/example/main/front/VaadinUtil.java    |  64 ++++
 .../example/main/service/ServiceBookFile.java |   6 +
 .../service/books/ServiceBookSearchImpl.java  |   1 -
 .../service/files/ServiceBookFileImpl.java    |  14 +-
 18 files changed, 862 insertions(+), 48 deletions(-)
 create mode 100644 JavaProject/demo/src/main/java/com/example/main/front/AddBookVIew.java
 create mode 100644 JavaProject/demo/src/main/java/com/example/main/front/AuthorView.java
 create mode 100644 JavaProject/demo/src/main/java/com/example/main/front/BookView.java
 create mode 100644 JavaProject/demo/src/main/java/com/example/main/front/TextConstants.java
 create mode 100644 JavaProject/demo/src/main/java/com/example/main/front/VaadinUtil.java

diff --git a/JavaProject/demo/src/main/java/com/example/main/LibraryApplication.java b/JavaProject/demo/src/main/java/com/example/main/LibraryApplication.java
index c521277..90ba3ff 100644
--- a/JavaProject/demo/src/main/java/com/example/main/LibraryApplication.java
+++ b/JavaProject/demo/src/main/java/com/example/main/LibraryApplication.java
@@ -1,13 +1,8 @@
 package com.example.main;
 
-import com.example.main.entity.Author;
-import com.example.main.entity.utilities.CheckingAddAuthor;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
-import java.util.ArrayList;
-import java.util.List;
-
 @SpringBootApplication
 public class LibraryApplication {
 
diff --git a/JavaProject/demo/src/main/java/com/example/main/controller/ControllerAuthorsWithBooksMethods.java b/JavaProject/demo/src/main/java/com/example/main/controller/ControllerAuthorsWithBooksMethods.java
index bb8826c..219e096 100644
--- a/JavaProject/demo/src/main/java/com/example/main/controller/ControllerAuthorsWithBooksMethods.java
+++ b/JavaProject/demo/src/main/java/com/example/main/controller/ControllerAuthorsWithBooksMethods.java
@@ -10,11 +10,14 @@ import com.example.main.service.ServiceAuthor;
 import com.example.main.service.ServiceBook;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
+import org.springframework.transaction.annotation.Transactional;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
 import java.time.LocalDateTime;
 import java.util.List;
 import java.util.Set;
@@ -47,6 +50,8 @@ public class ControllerAuthorsWithBooksMethods {
      */
     //todo переписать извлечение автора из коллекции с помощью Stream.
     @PostMapping("/add")
+    // TODO е работает без transactional если вызывать из фронта
+     @Transactional
     public ResponseEntity<GeneralResponse<?>> saveBookAndAuthor(@RequestBody DtoAuthorsWithBooks bookAuthorAndBookDTO) {
 
         try {
diff --git a/JavaProject/demo/src/main/java/com/example/main/controller/only_for_books/ControllerBookFind.java b/JavaProject/demo/src/main/java/com/example/main/controller/only_for_books/ControllerBookFind.java
index d00ad4b..7ccec16 100644
--- a/JavaProject/demo/src/main/java/com/example/main/controller/only_for_books/ControllerBookFind.java
+++ b/JavaProject/demo/src/main/java/com/example/main/controller/only_for_books/ControllerBookFind.java
@@ -1,5 +1,6 @@
 package com.example.main.controller.only_for_books;
 
+import com.example.main.entity.Author;
 import com.example.main.entity.utilities.GeneralResponse;
 import com.example.main.entity.Book;
 import com.example.main.entity.enums.EvaluationOfBook;
@@ -9,7 +10,10 @@ import com.example.main.service.ServiceBook;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
+
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Set;
 
 /** Класс является контроллером содержащим методы для поиска книг */
 @RestController
diff --git a/JavaProject/demo/src/main/java/com/example/main/dao/RepositoryBookFile.java b/JavaProject/demo/src/main/java/com/example/main/dao/RepositoryBookFile.java
index e8feb26..7d1e47d 100644
--- a/JavaProject/demo/src/main/java/com/example/main/dao/RepositoryBookFile.java
+++ b/JavaProject/demo/src/main/java/com/example/main/dao/RepositoryBookFile.java
@@ -2,10 +2,19 @@ package com.example.main.dao;
 
 import com.example.main.entity.BookFile;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.stereotype.Repository;
 
+import java.util.List;
+
 @Repository
 public interface RepositoryBookFile extends JpaRepository<BookFile,Integer> {
 
 
+    List<BookFile> findByBook_Id(int id);
+
+    @Modifying
+    @Query("DELETE FROM BookFile bf WHERE bf.id = :id")
+    void deleteByIdForce(int id);
 }
diff --git a/JavaProject/demo/src/main/java/com/example/main/entity/Book.java b/JavaProject/demo/src/main/java/com/example/main/entity/Book.java
index 18fe42b..4de897a 100644
--- a/JavaProject/demo/src/main/java/com/example/main/entity/Book.java
+++ b/JavaProject/demo/src/main/java/com/example/main/entity/Book.java
@@ -6,21 +6,25 @@ import com.example.main.entity.enums.Genre;
 import com.example.main.entity.enums.ReadingStatus;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import jakarta.persistence.*;
+
 import java.time.LocalDateTime;
 import java.util.Set;
 
-/** Entity class*/
+/**
+ * Entity class
+ */
 @Entity
 @Table(name = "books")
 public final class Book extends Literature {
 
-//    говорит о том что связь уже налажена классе Author поле books
+    //    говорит о том что связь уже налажена классе Author поле books
     @JsonIgnoreProperties(value = "books")
     @ManyToMany(mappedBy = "books", cascade = {CascadeType.PERSIST
-            ,CascadeType.MERGE, CascadeType.REFRESH , CascadeType.DETACH})
+            , CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH}, fetch = FetchType.LAZY)
     private Set<Author> authors;
 
-    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL)
+    //todo поменял на EAGER, иначе не ищет
+    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
     private Set<BookFile> bookFiles; //связь с табл
 
     public Book() {
diff --git a/JavaProject/demo/src/main/java/com/example/main/entity/BookFile.java b/JavaProject/demo/src/main/java/com/example/main/entity/BookFile.java
index 94a1c8f..c4111a9 100644
--- a/JavaProject/demo/src/main/java/com/example/main/entity/BookFile.java
+++ b/JavaProject/demo/src/main/java/com/example/main/entity/BookFile.java
@@ -28,8 +28,9 @@ public final class BookFile {
     private byte [] fileData;
 
     @JsonIgnore
-    @ManyToOne(cascade = {CascadeType.PERSIST
-            ,CascadeType.MERGE, CascadeType.REFRESH , CascadeType.DETACH})
+    //TODO удалил CascadeType.PERSIST
+    @ManyToOne(cascade = {
+            CascadeType.MERGE, CascadeType.REFRESH , CascadeType.DETACH})
     @JoinColumn(name = "book_id") // Связь с полем в таблице book_files
     private Book book;
 
diff --git a/JavaProject/demo/src/main/java/com/example/main/entity/enums/EvaluationOfBook.java b/JavaProject/demo/src/main/java/com/example/main/entity/enums/EvaluationOfBook.java
index 784f09e..62cec2f 100644
--- a/JavaProject/demo/src/main/java/com/example/main/entity/enums/EvaluationOfBook.java
+++ b/JavaProject/demo/src/main/java/com/example/main/entity/enums/EvaluationOfBook.java
@@ -2,5 +2,25 @@ package com.example.main.entity.enums;
 
 
 public enum EvaluationOfBook {
-    NO_GRADES, ONE, TWO, THREE, FOUR, FIVE,SIX,SEVEN,EIGHT, NINE, TEN;
+    NO_GRADES   ("0"),
+    ONE         ("1"),
+    TWO         ("2"),
+    THREE       ("3"),
+    FOUR        ("4"),
+    FIVE        ("5"),
+    SIX         ("6"),
+    SEVEN       ("7"),
+    EIGHT       ("8"),
+    NINE        ("9"),
+    TEN         ("10");
+
+    private final String evaluation;
+
+    EvaluationOfBook(String evaluation) {
+        this.evaluation = evaluation;
+    }
+
+    public String getEvaluation() {
+        return evaluation;
+    }
 }
diff --git a/JavaProject/demo/src/main/java/com/example/main/entity/enums/Genre.java b/JavaProject/demo/src/main/java/com/example/main/entity/enums/Genre.java
index 5bdb5fd..9d01dff 100644
--- a/JavaProject/demo/src/main/java/com/example/main/entity/enums/Genre.java
+++ b/JavaProject/demo/src/main/java/com/example/main/entity/enums/Genre.java
@@ -1,5 +1,23 @@
 package com.example.main.entity.enums;
 
 public enum Genre {
-    FANTASY, PSYCHOLOGY, HISTORY, PHILOSOPHY, DETECTIVE, HORROR,MOTIVATIONAL_LITERATURE,FINANCE,UNKNOWN;
+    FANTASY("Фентези"),
+    PSYCHOLOGY("Психология"),
+    HISTORY("История"),
+    PHILOSOPHY("Философия"),
+    DETECTIVE("Детектив"),
+    HORROR("Хоррор"),
+    MOTIVATIONAL_LITERATURE("Мотивационная литература"),
+    FINANCE("Финансы"),
+    UNKNOWN("-");
+
+    private final String genre;
+
+    Genre(String genre) {
+        this.genre = genre;
+    }
+
+    public String getGenre() {
+        return genre;
+    }
 }
diff --git a/JavaProject/demo/src/main/java/com/example/main/entity/enums/ReadingStatus.java b/JavaProject/demo/src/main/java/com/example/main/entity/enums/ReadingStatus.java
index d442684..06f1caa 100644
--- a/JavaProject/demo/src/main/java/com/example/main/entity/enums/ReadingStatus.java
+++ b/JavaProject/demo/src/main/java/com/example/main/entity/enums/ReadingStatus.java
@@ -1,5 +1,18 @@
 package com.example.main.entity.enums;
 
 public enum ReadingStatus {
-    UNKNOWN, READING_NOW, WAS_READ, GOING_TO_READ;
+    UNKNOWN("-"),
+    READING_NOW("Читаю"),
+    WAS_READ("Прочтено"),
+    GOING_TO_READ("Собираюсь читать");
+
+    private final String status;
+
+    ReadingStatus(String status) {
+        this.status = status;
+    }
+
+    public String getStatus() {
+        return status;
+    }
 }
diff --git a/JavaProject/demo/src/main/java/com/example/main/front/AddBookVIew.java b/JavaProject/demo/src/main/java/com/example/main/front/AddBookVIew.java
new file mode 100644
index 0000000..e04d8a8
--- /dev/null
+++ b/JavaProject/demo/src/main/java/com/example/main/front/AddBookVIew.java
@@ -0,0 +1,165 @@
+package com.example.main.front;
+
+import com.example.main.controller.ControllerAuthorsWithBooksMethods;
+import com.example.main.dto.DtoAuthorsWithBooks;
+import com.example.main.entity.Book;
+import com.example.main.entity.BookFile;
+import com.example.main.entity.enums.EvaluationOfBook;
+import com.example.main.entity.enums.Genre;
+import com.example.main.entity.enums.ReadingStatus;
+import com.example.main.service.ServiceBook;
+import com.example.main.service.ServiceBookFile;
+import com.vaadin.flow.component.button.Button;
+import com.vaadin.flow.component.combobox.ComboBox;
+import com.vaadin.flow.component.dialog.Dialog;
+import com.vaadin.flow.component.html.Span;
+import com.vaadin.flow.component.notification.NotificationVariant;
+import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
+import com.vaadin.flow.component.orderedlayout.VerticalLayout;
+import com.vaadin.flow.component.textfield.TextField;
+import com.vaadin.flow.component.upload.SucceededEvent;
+import com.vaadin.flow.component.upload.Upload;
+import com.vaadin.flow.component.upload.receivers.MultiFileMemoryBuffer;
+import com.vaadin.flow.router.Route;
+
+import java.io.IOException;
+import java.util.Objects;
+
+import static com.example.main.front.TextConstants.*;
+
+@Route("addBook")
+public class AddBookVIew extends VerticalLayout {
+
+    private final ControllerAuthorsWithBooksMethods controllerAuthorsWithBooksMethods;
+    private final ServiceBookFile serviceBookFile;
+
+    private final ServiceBook serviceBook;
+
+    private TextField lastNameT;
+    private TextField firstNameT;
+    private TextField patronymicT;
+
+    private TextField bookNameT;
+    private ComboBox<Genre> bookGenreT;
+    private TextField bookQuantityPageT;
+    private ComboBox<ReadingStatus> bookReadingStatusBox;
+    private ComboBox<EvaluationOfBook> bookEvaluationBox;
+    private TextField bookCommentT;
+
+    private Button submitButton;
+
+    public AddBookVIew(ControllerAuthorsWithBooksMethods controllerAuthorsWithBooksMethods, ServiceBookFile serviceBookFile, ServiceBook serviceBook) {
+        this.controllerAuthorsWithBooksMethods = controllerAuthorsWithBooksMethods;
+        this.serviceBookFile = serviceBookFile;
+        this.serviceBook = serviceBook;
+        createFieldsForAuthor();
+        createFieldsForBook();
+        createSubmitButton();
+
+        setAlignItems(Alignment.CENTER);
+
+        VerticalLayout authorSide = new VerticalLayout(lastNameT, firstNameT, patronymicT);
+        VerticalLayout bookSide = new VerticalLayout(
+                bookNameT, bookGenreT, bookQuantityPageT,
+                bookReadingStatusBox, bookEvaluationBox, bookCommentT
+        );
+
+
+        HorizontalLayout mainLayout = new HorizontalLayout(authorSide, bookSide);
+        Span labelTop = new Span(ADD_NEW_BOOK);
+        HorizontalLayout horizontalLayout = new HorizontalLayout(labelTop, VaadinUtil.toMenu);
+        horizontalLayout.setAlignItems(Alignment.CENTER);
+        add(horizontalLayout, mainLayout, submitButton);
+        setAlignSelf(Alignment.END, submitButton);
+
+    }
+
+    private void createFieldsForAuthor() {
+        lastNameT = new TextField(LAST_NAME);
+        firstNameT = new TextField(FIRST_NAME);
+        patronymicT = new TextField(PATRONYMIC_NAME);
+    }
+
+    private void createFieldsForBook() {
+        bookNameT = new TextField(BOOK_NAME);
+
+        bookGenreT = new ComboBox<>(BOOK_GENRE);
+        bookGenreT.setItems(Genre.values());
+        bookGenreT.setItemLabelGenerator(Genre::getGenre);
+
+        bookQuantityPageT = new TextField(BOOK_QUANTITY_PAGE);
+
+        bookReadingStatusBox = new ComboBox<>(BOOK_READING_STATUS);
+        bookReadingStatusBox.setItems(ReadingStatus.values());
+        bookReadingStatusBox.setItemLabelGenerator(ReadingStatus::getStatus);
+
+        bookEvaluationBox = new ComboBox<>(BOOK_EVALUATION);
+        bookEvaluationBox.setItems(EvaluationOfBook.values());
+        bookEvaluationBox.setItemLabelGenerator(EvaluationOfBook::getEvaluation);
+
+        bookCommentT = new TextField(BOOK_COMMENT);
+    }
+
+    private void createSubmitButton() {
+        submitButton = new Button(TextConstants.ADD,
+                __ -> {
+                    if (!isFieldsValidated()) {
+                        VaadinUtil.showTopDefaultNotification("Ошибка", NotificationVariant.LUMO_ERROR);
+                        return;
+                    }
+                    var bookAndAuthorRequest = new DtoAuthorsWithBooks(
+                            bookNameT.getValue(),
+                            bookGenreT.getValue(),
+                            bookQuantityPageT.getValue().isEmpty() ? 0 : Integer.parseInt(bookQuantityPageT.getValue()),
+                            bookReadingStatusBox.getValue(),
+                            bookEvaluationBox.getValue(),
+                            bookCommentT.getValue(),
+                            firstNameT.getValue(),
+                            lastNameT.getValue(),
+                            patronymicT.getValue()
+
+                    );
+                    var creationResult =
+                            controllerAuthorsWithBooksMethods.saveBookAndAuthor(bookAndAuthorRequest);
+                    //TODO добавить более внятный ответ
+                    if (creationResult.getStatusCode().is2xxSuccessful()) {
+                        VaadinUtil.showTopDefaultNotification("Все ок", NotificationVariant.LUMO_SUCCESS);
+                        VaadinUtil.yesNoDialog(
+                                "Книга добавлена, загрузить файл?",
+                                event -> {
+                                    Book savedBook = (Book) Objects.requireNonNull(creationResult.getBody()).getData();
+                                    MultiFileMemoryBuffer buffer = new MultiFileMemoryBuffer();
+                                    Upload upload = new Upload(buffer);
+                                    upload.addSucceededListener(uploadEvent -> saveFile(uploadEvent, buffer, savedBook));
+                                    Dialog uploadDialog = new Dialog(upload);
+                                    uploadDialog.open();
+                                }
+                        ).open();
+                    } else {
+                        VaadinUtil.showTopDefaultNotification("Неок", NotificationVariant.LUMO_ERROR);
+                    }
+                });
+    }
+
+    private void saveFile(SucceededEvent uploadEvent, MultiFileMemoryBuffer buffer, Book savedBook) {
+        try {
+            var bytes = buffer.getInputStream(uploadEvent.getFileName()).readAllBytes();
+            serviceBookFile.saveOrUpdate(new BookFile(
+                    uploadEvent.getFileName(),
+                    bytes.length,
+                    uploadEvent.getMIMEType(),
+                    bytes,
+                    savedBook
+                    )
+            );
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private boolean isFieldsValidated() {
+        return true;
+    }
+
+
+}
diff --git a/JavaProject/demo/src/main/java/com/example/main/front/AuthorView.java b/JavaProject/demo/src/main/java/com/example/main/front/AuthorView.java
new file mode 100644
index 0000000..a53cb1d
--- /dev/null
+++ b/JavaProject/demo/src/main/java/com/example/main/front/AuthorView.java
@@ -0,0 +1,192 @@
+package com.example.main.front;
+
+import com.example.main.controller.only_for_authors.ControllerAuthorDeleted;
+import com.example.main.controller.only_for_authors.ControllerAuthorFind;
+import com.example.main.controller.only_for_authors.ControllerAuthorSaveOrUpdate;
+import com.example.main.entity.Author;
+import com.vaadin.flow.component.button.Button;
+import com.vaadin.flow.component.combobox.ComboBox;
+import com.vaadin.flow.component.dialog.Dialog;
+import com.vaadin.flow.component.grid.Grid;
+import com.vaadin.flow.component.html.Span;
+import com.vaadin.flow.component.notification.NotificationVariant;
+import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
+import com.vaadin.flow.component.orderedlayout.VerticalLayout;
+import com.vaadin.flow.component.textfield.TextField;
+import com.vaadin.flow.data.provider.ListDataProvider;
+import com.vaadin.flow.router.Route;
+import org.apache.commons.lang3.StringUtils;
+
+import java.util.List;
+import java.util.Objects;
+
+@Route("author")
+public class AuthorView extends VerticalLayout {
+
+    private final ControllerAuthorSaveOrUpdate controllerAuthorSaveOrUpdate;
+    private final ControllerAuthorFind controllerAuthorFind;
+    private final ControllerAuthorDeleted controllerAuthorDeleted;
+
+
+    private Button addAuthor;
+    private Button deleteAuthor;
+    private Button updateAuthor;
+
+    private Grid<Author> grid;
+    private ListDataProvider<Author> dataProvider;
+    private TextField searchField;
+
+    public AuthorView(ControllerAuthorSaveOrUpdate controllerAuthorSaveOrUpdate, ControllerAuthorFind controllerAuthorFind, ControllerAuthorDeleted controllerAuthorDeleted) {
+        this.controllerAuthorSaveOrUpdate = controllerAuthorSaveOrUpdate;
+        this.controllerAuthorFind = controllerAuthorFind;
+        this.controllerAuthorDeleted = controllerAuthorDeleted;
+        createMainFields();
+        prepareGrid();
+
+        setAlignItems(Alignment.CENTER);
+        Span labelTop = new Span("Авторы");
+        HorizontalLayout horizontalLayout = new HorizontalLayout(searchField, addAuthor, deleteAuthor, updateAuthor);
+        horizontalLayout.setAlignItems(Alignment.CENTER);
+        HorizontalLayout horizontalLayout1 = new HorizontalLayout(labelTop, VaadinUtil.toMenu);
+        horizontalLayout1.setAlignItems(Alignment.CENTER);
+        add(horizontalLayout1, horizontalLayout, grid);
+
+
+    }
+
+    private void prepareGrid() {
+        grid = new Grid<>();
+        grid.addColumn(Author::getAuthorLastName)
+                .setHeader("Фамилия")
+                .setAutoWidth(true);
+        grid.addColumn(Author::getAuthorName)
+                .setHeader("Имя")
+                .setAutoWidth(true);
+        grid.addColumn(Author::getAuthorPatronymic)
+                .setHeader("Отчество")
+                .setAutoWidth(true);
+        List<Author> data = Objects.requireNonNull(controllerAuthorFind.showAllAuthors().getBody()).getData();
+        dataProvider = new ListDataProvider<>(data);
+        grid.setDataProvider(dataProvider);
+    }
+
+    private void createMainFields() {
+        addAuthor = new Button("Добавить автора", __ -> createAddDialog().open());
+        deleteAuthor = new Button("Удалить автора", __ -> {
+            if (grid.getSelectedItems().isEmpty()) {
+                VaadinUtil.showTopDefaultNotification("Выбери автора", NotificationVariant.LUMO_ERROR);
+                return;
+            }
+            deleteAuthor();
+        });
+        updateAuthor = new Button("Изменить автора", __ -> {
+            if (grid.getSelectedItems().isEmpty()) {
+                VaadinUtil.showTopDefaultNotification("Выбери автора", NotificationVariant.LUMO_ERROR);
+                return;
+            }
+            updateDialog().open();
+        });
+
+        searchField = new TextField();
+        searchField.setPlaceholder("Поиск");
+        searchField.addValueChangeListener(event -> {
+            String searchTerm = event.getValue().trim();
+            dataProvider.setFilter(author -> {
+                boolean matchesLastName = author.getAuthorLastName().toLowerCase().contains(searchTerm.toLowerCase());
+                boolean matchesFirstName = author.getAuthorName().toLowerCase().contains(searchTerm.toLowerCase());
+                boolean matchesPatronymic = author.getAuthorPatronymic().toLowerCase().contains(searchTerm.toLowerCase());
+                return matchesLastName || matchesFirstName || matchesPatronymic;
+            });
+        });
+    }
+
+    private Dialog createAddDialog() {
+        var lastNameT = new TextField("Фамилия");
+        var firstNameT = new TextField("Имя");
+        var patronymicT = new TextField("Отчество");
+
+        HorizontalLayout horizontalLayout = new HorizontalLayout(lastNameT, firstNameT, patronymicT);
+        var submit = new Button("Подтвердить", __ -> {
+            var saveResult = controllerAuthorSaveOrUpdate.saveAuthor(
+                    new Author(firstNameT.getValue(), lastNameT.getValue(), patronymicT.getValue())
+            );
+            if (saveResult.getStatusCode().is2xxSuccessful()) {
+                VaadinUtil.showTopDefaultNotification("Ok", NotificationVariant.LUMO_SUCCESS);
+                recalcGrid();
+            } else {
+                VaadinUtil.showTopDefaultNotification("Error", NotificationVariant.LUMO_ERROR);
+            }
+        });
+        VerticalLayout verticalLayout = new VerticalLayout(horizontalLayout, submit);
+        verticalLayout.setAlignSelf(Alignment.END, submit);
+        Dialog dialog = new Dialog(verticalLayout);
+
+        VaadinUtil.attachCloseButton(dialog);
+        return dialog;
+    }
+
+    private void deleteAuthor() {
+        Author author = grid.getSelectedItems().stream().findFirst().orElseThrow();
+        var generalResponseResponseEntity = controllerAuthorDeleted.deleteAuthor(author.getId());
+        VaadinUtil.showOkNotOkNotification(generalResponseResponseEntity);
+        recalcGrid();
+    }
+
+    private Dialog updateDialog() {
+        var author = grid.getSelectedItems().stream().findFirst().orElseThrow();
+        var lastName = new TextField("Фамилия");
+        lastName.setSizeFull();
+        var firstName = new TextField("Имя");
+        firstName.setSizeFull();
+        var patronymic = new TextField("Отчество");
+        patronymic.setSizeFull();
+        lastName.setValue(author.getAuthorLastName());
+        firstName.setValue(author.getAuthorName());
+        patronymic.setValue(author.getAuthorPatronymic());
+        var updateButton = new Button("Обновить", __ -> {
+            author.setAuthorLastName(lastName.getValue());
+            author.setAuthorName(firstName.getValue());
+            author.setAuthorPatronymic(patronymic.getValue());
+            var generalResponseResponseEntity = controllerAuthorSaveOrUpdate.updateAuthor(author);
+            VaadinUtil.showOkNotOkNotification(generalResponseResponseEntity);
+            recalcGrid();
+        });
+
+        VerticalLayout left = new VerticalLayout(lastName, firstName, patronymic);
+        HorizontalLayout top = new HorizontalLayout(left);
+
+        VerticalLayout main = new VerticalLayout(top, updateButton);
+        main.setAlignSelf(Alignment.END, updateButton);
+        Dialog dialog = new Dialog(main);
+        dialog.setWidth("30%");
+        VaadinUtil.attachCloseButton(dialog);
+        return dialog;
+    }
+
+
+    private ComboBox<Author> createFindAuthorBox() {
+        var generalResponseResponseEntity = controllerAuthorFind.showAllAuthors();
+        List<Author> authors;
+        if (!generalResponseResponseEntity.getStatusCode().is2xxSuccessful()) {
+            VaadinUtil.showTopDefaultNotification("Ошибка поиска авторов", NotificationVariant.LUMO_ERROR);
+            authors = List.of();
+        } else {
+            authors = Objects.requireNonNull(generalResponseResponseEntity.getBody()).getData();
+        }
+
+        var authorBox = new ComboBox<Author>("Авторы");
+        authorBox.setItems(authors);
+        authorBox.setItemLabelGenerator(author -> "%s %s %s".formatted(
+                StringUtils.defaultString(author.getAuthorLastName()),
+                StringUtils.defaultString(author.getAuthorName()),
+                StringUtils.defaultString(author.getAuthorPatronymic()))
+        );
+
+        return authorBox;
+    }
+
+    private void recalcGrid() {
+        grid.setItems(Objects.requireNonNull(controllerAuthorFind.showAllAuthors().getBody()).getData());
+    }
+
+}
diff --git a/JavaProject/demo/src/main/java/com/example/main/front/BookView.java b/JavaProject/demo/src/main/java/com/example/main/front/BookView.java
new file mode 100644
index 0000000..13bd9a2
--- /dev/null
+++ b/JavaProject/demo/src/main/java/com/example/main/front/BookView.java
@@ -0,0 +1,310 @@
+package com.example.main.front;
+
+import com.example.main.controller.files.ControllerBookFileFindAndDownloading;
+import com.example.main.controller.only_for_books.ControllerBookFind;
+import com.example.main.controller.only_for_books.ControllerBooksDeleted;
+import com.example.main.controller.only_for_books.ControllerBooksSaveAndUpdate;
+import com.example.main.entity.Book;
+import com.example.main.entity.BookFile;
+import com.example.main.entity.enums.EvaluationOfBook;
+import com.example.main.entity.enums.Genre;
+import com.example.main.entity.enums.ReadingStatus;
+import com.example.main.entity.utilities.DateFormatter;
+import com.example.main.service.ServiceBookFile;
+import com.vaadin.flow.component.button.Button;
+import com.vaadin.flow.component.combobox.ComboBox;
+import com.vaadin.flow.component.dialog.Dialog;
+import com.vaadin.flow.component.grid.Grid;
+import com.vaadin.flow.component.html.Anchor;
+import com.vaadin.flow.component.html.Span;
+import com.vaadin.flow.component.notification.NotificationVariant;
+import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
+import com.vaadin.flow.component.orderedlayout.VerticalLayout;
+import com.vaadin.flow.component.textfield.TextField;
+import com.vaadin.flow.component.upload.SucceededEvent;
+import com.vaadin.flow.component.upload.Upload;
+import com.vaadin.flow.component.upload.receivers.MultiFileMemoryBuffer;
+import com.vaadin.flow.data.provider.ListDataProvider;
+import com.vaadin.flow.data.renderer.TextRenderer;
+import com.vaadin.flow.router.Route;
+import com.vaadin.flow.server.StreamResource;
+import org.apache.commons.lang3.StringUtils;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.util.List;
+import java.util.Objects;
+import java.util.Set;
+
+@Route("book")
+public class BookView extends VerticalLayout {
+
+    private Button deleteBookButton;
+    private Button updateBookButton;
+    private Button manageFileButton;
+
+
+    private Grid<Book> grid;
+    private ListDataProvider<Book> dataProvider;
+    private TextField searchField;
+    private ComboBox<Genre> searchGenre;
+    private ComboBox<ReadingStatus> searchReadingStatus;
+
+    private final ServiceBookFile serviceBookFile;
+    private final ControllerBookFind controllerBookFind;
+    private final ControllerBooksSaveAndUpdate controllerBooksSaveAndUpdate;
+    private final ControllerBooksDeleted controllerBooksDeleted;
+    private final ControllerBookFileFindAndDownloading controllerBookFileFindAndDownloading;
+
+
+    public BookView(ServiceBookFile serviceBookFile, ControllerBookFind controllerBookFind, ControllerBooksSaveAndUpdate controllerBooksSaveAndUpdate, ControllerBooksDeleted controllerBooksDeleted, ControllerBookFileFindAndDownloading controllerBookFileFindAndDownloading) {
+        this.serviceBookFile = serviceBookFile;
+        this.controllerBookFind = controllerBookFind;
+        this.controllerBooksSaveAndUpdate = controllerBooksSaveAndUpdate;
+        this.controllerBooksDeleted = controllerBooksDeleted;
+        this.controllerBookFileFindAndDownloading = controllerBookFileFindAndDownloading;
+        createMainFields();
+        prepareGrid();
+
+        setAlignItems(Alignment.CENTER);
+        Span labelTop = new Span("Книги");
+        HorizontalLayout horizontalLayout = new HorizontalLayout(searchField, searchGenre, searchReadingStatus, updateBookButton, manageFileButton, deleteBookButton);
+        horizontalLayout.setAlignItems(Alignment.CENTER);
+        HorizontalLayout horizontalLayout1 = new HorizontalLayout(labelTop, VaadinUtil.toMenu);
+        horizontalLayout1.setAlignItems(Alignment.CENTER);
+        add(horizontalLayout1, horizontalLayout, grid);
+
+        setSizeFull();
+        add(grid);
+    }
+
+
+    private void prepareGrid() {
+        grid = new Grid<>();
+        grid.setSizeFull();
+        grid.addColumn(Book::getTitleOfBook)
+                .setHeader("Название")
+                .setAutoWidth(true);
+        grid
+                .addColumn(new TextRenderer<>(book -> book.getGenre().getGenre()))
+                .setKey("genre")
+                .setHeader("Жанр")
+                .setAutoWidth(true);
+        grid.addColumn(Book::getQuantityOfPage)
+                .setHeader("Кол-во страниц")
+                .setAutoWidth(true);
+        grid
+                .addColumn(new TextRenderer<>(book -> book.getReadingStatus().getStatus()))
+                .setKey("readingStatus")
+                .setHeader("Статус чтения")
+                .setAutoWidth(true);
+        grid
+                .addColumn(new TextRenderer<>(book -> book.getEvaluationOfBook().getEvaluation()))
+                .setKey("evaluationOfBook")
+                .setHeader("Оценка")
+                .setAutoWidth(true);
+        grid
+                .addColumn(new TextRenderer<>(book -> DateFormatter.formatter.format(book.getBookAddedDate())))
+                .setKey("bookAddedDate")
+                .setHeader("Дата добавления")
+                .setAutoWidth(true);
+        grid
+                .addColumn(new TextRenderer<>(book -> DateFormatter.formatter.format(book.getBookAddedDate())))
+                .setKey("bookWasReadDate")
+                .setHeader("Дата прочтения")
+                .setAutoWidth(true);
+
+        List<Book> data = Objects.requireNonNull(controllerBookFind.showAllBooks().getBody()).getData();
+        dataProvider = new ListDataProvider<>(data);
+        grid.setDataProvider(dataProvider);
+    }
+
+    private void createMainFields() {
+        updateBookButton = new Button("Изменить книгу", __ -> {
+            if (grid.getSelectedItems().isEmpty()) {
+                VaadinUtil.showTopDefaultNotification("Выбери книгу", NotificationVariant.LUMO_ERROR);
+                return;
+            }
+            updateDialog().open();
+        });
+
+        manageFileButton = new Button("Изменить файлы", __ -> {
+            if (grid.getSelectedItems().isEmpty()) {
+                VaadinUtil.showTopDefaultNotification("Выбери книгу", NotificationVariant.LUMO_ERROR);
+                return;
+            }
+            createFilesDialog().open();
+        });
+        deleteBookButton = new Button("Удалить книгу", __ -> deleteBook());
+
+        searchField = new TextField();
+        searchField.setPlaceholder("Поиск имя, коммент.");
+        searchField.addValueChangeListener(__ -> doFilter());
+
+        searchGenre = new ComboBox<>();
+        searchGenre.setItems(Genre.values());
+        searchGenre.setItemLabelGenerator(Genre::getGenre);
+        searchGenre.setPlaceholder("Жанр");
+        searchGenre.addValueChangeListener(__ -> doFilter());
+
+        searchReadingStatus = new ComboBox<>();
+        searchReadingStatus.setItems(ReadingStatus.values());
+        searchReadingStatus.setItemLabelGenerator(ReadingStatus::getStatus);
+        searchReadingStatus.setPlaceholder("Статус чтения");
+        searchReadingStatus.addValueChangeListener(__ -> doFilter());
+    }
+
+    private void doFilter() {
+        dataProvider.setFilter(book -> {
+            boolean title = StringUtils.containsIgnoreCase(book.getTitleOfBook(), searchField.getValue());
+            boolean comment = StringUtils.containsIgnoreCase(book.getCommentOfBook(), searchField.getValue());
+            boolean genreMatch = searchGenre.isEmpty() || book.getGenre().equals(searchGenre.getValue());
+            boolean matchesPatronymic = searchReadingStatus.isEmpty() || book.getReadingStatus().equals(searchReadingStatus.getValue());
+            return (title || comment) && genreMatch && matchesPatronymic;
+        });
+    }
+
+
+    private void deleteBook() {
+        Book book = grid.getSelectedItems().stream().findFirst().orElseThrow();
+        var generalResponseResponseEntity = controllerBooksDeleted.deleteBook(book.getId());
+        VaadinUtil.showOkNotOkNotification(generalResponseResponseEntity);
+        recalcGrid();
+    }
+
+    private Dialog updateDialog() {
+        var book = grid.getSelectedItems().stream().findFirst().orElseThrow();
+        var title = new TextField("Название");
+        title.setSizeFull();
+        var quantityOfPages = new TextField("Кол-во страниц");
+        quantityOfPages.setSizeFull();
+        var genre = new ComboBox<Genre>("Жанр");
+        genre.setItems(Genre.values());
+        genre.setItemLabelGenerator(Genre::getGenre);
+        genre.setSizeFull();
+        var readingStatus = new ComboBox<ReadingStatus>("Статус чтения");
+        readingStatus.setItems(ReadingStatus.values());
+        readingStatus.setItemLabelGenerator(ReadingStatus::getStatus);
+        readingStatus.setSizeFull();
+
+        var evaluation = new ComboBox<EvaluationOfBook>("Оценка");
+        evaluation.setItems(EvaluationOfBook.values());
+        evaluation.setItemLabelGenerator(EvaluationOfBook::getEvaluation);
+        evaluation.setSizeFull();
+
+        var comment = new TextField("Коммент.");
+        comment.setSizeFull();
+
+        title.setValue(book.getTitleOfBook());
+        quantityOfPages.setValue(String.valueOf(book.getQuantityOfPage()));
+        genre.setValue(book.getGenre());
+        readingStatus.setValue(book.getReadingStatus());
+        evaluation.setValue(book.getEvaluationOfBook());
+        comment.setValue(book.getCommentOfBook());
+
+
+        var updateButton = new Button("Обновить", __ -> {
+            book.setTitleOfBook(title.getValue());
+            book.setQuantityOfPage(Integer.parseInt(quantityOfPages.getValue()));
+            book.setGenre(genre.getValue());
+            book.setReadingStatus(readingStatus.getValue());
+            book.setEvaluationOfBook(evaluation.getValue());
+            book.setCommentOfBook(comment.getValue());
+            var generalResponseResponseEntity = controllerBooksSaveAndUpdate.updateBook(book);
+            VaadinUtil.showOkNotOkNotification(generalResponseResponseEntity);
+            recalcGrid();
+        });
+
+        VerticalLayout left = new VerticalLayout(title, genre, evaluation);
+        VerticalLayout right = new VerticalLayout(readingStatus, quantityOfPages, comment);
+        HorizontalLayout top = new HorizontalLayout(left, right);
+
+        VerticalLayout main = new VerticalLayout(top, updateButton);
+        main.setAlignSelf(Alignment.END, updateButton);
+        Dialog dialog = new Dialog(main);
+        dialog.setWidth("50%");
+        VaadinUtil.attachCloseButton(dialog);
+        return dialog;
+    }
+
+    private Dialog createFilesDialog() {
+        var book = grid.getSelectedItems().stream().findFirst().orElseThrow();
+        Set<BookFile> bookFiles = book.getBookFiles();
+        var fileGrid = new Grid<BookFile>();
+        fileGrid.setSizeFull();
+        fileGrid.addColumn(BookFile::getId)
+                .setHeader("Id")
+                .setAutoWidth(true);
+        fileGrid.addColumn(BookFile::getFileName)
+                .setHeader("Название")
+                .setAutoWidth(true);
+
+        var downloadFile = new Button("Скачать файл", __ -> {
+            if (fileGrid.getSelectedItems().isEmpty()) {
+                VaadinUtil.showTopDefaultNotification("Выбери файл", NotificationVariant.LUMO_ERROR);
+                return;
+            }
+            var file = fileGrid.getSelectedItems().stream().findFirst().orElseThrow();
+            StreamResource resource = new StreamResource(file.getFileName(), () -> new ByteArrayInputStream(file.getFileData()));
+            resource.setCacheTime(0);
+            var anchor = new Anchor(resource, "");
+            anchor.getElement().setAttribute("download", true);
+            anchor.getStyle().set("display", "none");
+            add(anchor);
+            anchor.getElement().callJsFunction("click");
+            anchor.addDetachListener(detach -> remove(anchor));
+            fileGrid.setItems(serviceBookFile.getBookFileById(file.getBook().getId()));
+        });
+
+        var deleteFile = new Button("Удалить файл", __ -> {
+            if (fileGrid.getSelectedItems().isEmpty()) {
+                VaadinUtil.showTopDefaultNotification("Выбери файл", NotificationVariant.LUMO_ERROR);
+                return;
+            }
+            var file = fileGrid.getSelectedItems().stream().findFirst().orElseThrow();
+            System.out.println("try delete file id " + file.getId());
+            serviceBookFile.deletedBookFileForce(file.getId());
+            fileGrid.setItems(serviceBookFile.getBookFileById(file.getBook().getId()));
+        });
+
+
+
+        MultiFileMemoryBuffer buffer = new MultiFileMemoryBuffer();
+        Upload upload = new Upload(buffer);
+        upload.addSucceededListener(uploadEvent -> {
+            saveFile(uploadEvent, buffer, book);
+            fileGrid.setItems(book.getBookFiles());
+        });
+        fileGrid.setItems(bookFiles);
+
+
+
+        Dialog dialog = new Dialog(upload,new HorizontalLayout(downloadFile, deleteFile), fileGrid);
+        dialog.setWidth("80%");
+        dialog.setHeight("100%");
+        VaadinUtil.attachCloseButton(dialog);
+        return dialog;
+    }
+
+    private void recalcGrid() {
+        grid.setItems(Objects.requireNonNull(controllerBookFind.showAllBooks().getBody()).getData());
+    }
+
+    private void saveFile(SucceededEvent uploadEvent, MultiFileMemoryBuffer buffer, Book savedBook) {
+        try {
+            var bytes = buffer.getInputStream(uploadEvent.getFileName()).readAllBytes();
+            serviceBookFile.saveOrUpdate(new BookFile(
+                            uploadEvent.getFileName(),
+                            bytes.length,
+                            uploadEvent.getMIMEType(),
+                            bytes,
+                            savedBook
+                    )
+            );
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+
+}
diff --git a/JavaProject/demo/src/main/java/com/example/main/front/MainView.java b/JavaProject/demo/src/main/java/com/example/main/front/MainView.java
index 19197a9..64b5a19 100644
--- a/JavaProject/demo/src/main/java/com/example/main/front/MainView.java
+++ b/JavaProject/demo/src/main/java/com/example/main/front/MainView.java
@@ -1,45 +1,23 @@
 package com.example.main.front;
 
-import com.example.main.controller.only_for_books.ControllerBookFind;
-import com.example.main.entity.Book;
+import com.vaadin.flow.component.UI;
 import com.vaadin.flow.component.button.Button;
-import com.vaadin.flow.component.combobox.ComboBox;
-import com.vaadin.flow.component.grid.Grid;
-import com.vaadin.flow.component.html.H1;
 import com.vaadin.flow.component.orderedlayout.VerticalLayout;
-import com.vaadin.flow.data.provider.DataProvider;
 import com.vaadin.flow.router.Route;
-import org.springframework.beans.factory.annotation.Autowired;
+import com.vaadin.flow.router.RouteAlias;
 
-import java.util.ArrayList;
-
-@Route("/testtt")
+@Route("library")
+@RouteAlias("/")
 public class MainView extends VerticalLayout {
 
-    private final ControllerBookFind restControllerBook;
-    private final Grid<Book> grid = new Grid<>(Book.class);
 
-    @Autowired
-    public MainView(ControllerBookFind restControllerBook) {
-        this.restControllerBook = restControllerBook;
+    public MainView() {
+        Button button = new Button(TextConstants.ADD_NEW_BOOK, __ -> UI.getCurrent().navigate(AddBookVIew.class));
+        Button button1 = new Button(TextConstants.AUTHORS, __ -> UI.getCurrent().navigate(AuthorView.class));
+        Button button2 = new Button(TextConstants.BOOKS, __ -> UI.getCurrent().navigate(BookView.class));
 
-        Button showAllButton = new Button("Показать все книги");
-        showAllButton.addClickListener(event -> {
-            grid.setItems((DataProvider<Book, Void>) restControllerBook.showAllBooks());
-        });
-        ComboBox<Integer> evaluationOfBookComboBox = new ComboBox<>();
-        ArrayList<Integer> arrayList = new ArrayList<>();
-        arrayList.add(1);
-        arrayList.add(2);
-        evaluationOfBookComboBox.setItems(arrayList);
-/*        evaluationOfBookComboBox.setItemLabelGenerator(selectedEvaluation -> {
-            if (EvaluationOfBook.EIGHT == selectedEvaluation) {
-                return "8 восемь!";
-            }
-            return "poshel na hui";
-        });*/
-      //  EvaluationOfBook value = evaluationOfBookComboBox.getValue();
-        add(new H1("Список книг"), evaluationOfBookComboBox, showAllButton, grid);
+        add(button, button1, button2);
+        setAlignItems(Alignment.CENTER);
     }
 
 
diff --git a/JavaProject/demo/src/main/java/com/example/main/front/TextConstants.java b/JavaProject/demo/src/main/java/com/example/main/front/TextConstants.java
new file mode 100644
index 0000000..2ad64b9
--- /dev/null
+++ b/JavaProject/demo/src/main/java/com/example/main/front/TextConstants.java
@@ -0,0 +1,19 @@
+package com.example.main.front;
+
+public class TextConstants {
+
+    static String ADD_NEW_BOOK = "Добавить новую книгу";
+    static String AUTHORS = "Авторы";
+    static String BOOKS = "Книги";
+    static String ADD = "Добавить";
+    static String LAST_NAME = "Фамилия";
+    static String FIRST_NAME = "Имя";
+    static String PATRONYMIC_NAME = "Отчество";
+
+    static String BOOK_NAME = "Название";
+    static String BOOK_GENRE = "Жанр";
+    static String BOOK_QUANTITY_PAGE = "Кол-во стр.";
+    static String BOOK_READING_STATUS = "Статус чтен.";
+    static String BOOK_EVALUATION = "Оценка книги";
+    static String BOOK_COMMENT = "Коммент.";
+}
diff --git a/JavaProject/demo/src/main/java/com/example/main/front/VaadinUtil.java b/JavaProject/demo/src/main/java/com/example/main/front/VaadinUtil.java
new file mode 100644
index 0000000..c50af96
--- /dev/null
+++ b/JavaProject/demo/src/main/java/com/example/main/front/VaadinUtil.java
@@ -0,0 +1,64 @@
+package com.example.main.front;
+
+import com.vaadin.flow.component.ClickEvent;
+import com.vaadin.flow.component.ComponentEventListener;
+import com.vaadin.flow.component.UI;
+import com.vaadin.flow.component.button.Button;
+import com.vaadin.flow.component.button.ButtonVariant;
+import com.vaadin.flow.component.dialog.Dialog;
+import com.vaadin.flow.component.grid.Grid;
+import com.vaadin.flow.component.icon.Icon;
+import com.vaadin.flow.component.notification.Notification;
+import com.vaadin.flow.component.notification.NotificationVariant;
+import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
+import org.springframework.http.ResponseEntity;
+
+import java.util.Map;
+
+public class VaadinUtil {
+
+    public static final Button toMenu = new Button("В меню", __ -> UI.getCurrent().navigate(MainView.class));
+
+    public static void showTopDefaultNotification(String text, NotificationVariant type) {
+        Notification notification = new Notification(text, 3000, Notification.Position.TOP_CENTER);
+        notification.addThemeVariants(type);
+        notification.open();
+    }
+
+    public static void showOkNotOkNotification(ResponseEntity<?> responseEntity) {
+        if (responseEntity.getStatusCode().is2xxSuccessful()) {
+            showTopDefaultNotification("Ok", NotificationVariant.LUMO_SUCCESS);
+        } else {
+            showTopDefaultNotification("NotOk", NotificationVariant.LUMO_ERROR);
+        }
+
+    }
+
+    public static Dialog yesNoDialog(String dialogLabel, ComponentEventListener<ClickEvent<Button>> confirmEvent) {
+        Dialog dialog = new Dialog(dialogLabel);
+        var confirmButton = new Button("Создать");
+        confirmButton.addClickListener(__ -> {
+            confirmEvent.onComponentEvent(__);
+            dialog.close();
+        });
+        confirmButton.setClassName("blue-button");
+        var cancelButton = new Button("Закрыть",
+                __ -> dialog.close());
+        cancelButton.setClassName("red-transparent-button");
+
+
+        var horizontalLayout = new HorizontalLayout();
+        horizontalLayout.setMargin(true);
+        horizontalLayout.setSpacing(true);
+        horizontalLayout.add(confirmButton, cancelButton);
+        dialog.add(horizontalLayout);
+        return dialog;
+    }
+
+    public static void attachCloseButton(Dialog dialog) {
+        Button closeButton = new Button(new Icon("lumo", "cross"), __ -> dialog.close());
+        closeButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY);
+        dialog.getHeader().add(closeButton);
+    }
+
+}
\ No newline at end of file
diff --git a/JavaProject/demo/src/main/java/com/example/main/service/ServiceBookFile.java b/JavaProject/demo/src/main/java/com/example/main/service/ServiceBookFile.java
index d07f7ee..c6f6960 100644
--- a/JavaProject/demo/src/main/java/com/example/main/service/ServiceBookFile.java
+++ b/JavaProject/demo/src/main/java/com/example/main/service/ServiceBookFile.java
@@ -2,6 +2,7 @@ package com.example.main.service;
 
 import com.example.main.entity.BookFile;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 import org.springframework.web.bind.annotation.GetMapping;
 
 import java.util.List;
@@ -13,6 +14,8 @@ public interface ServiceBookFile {
     List<BookFile> getAllBookFiles();
 
 
+    List<BookFile> getBookFileById(Integer bookId);
+
     BookFile getBookFile(int id);
 
 
@@ -22,6 +25,9 @@ public interface ServiceBookFile {
     void deletedBookFile(int id);
 
 
+    @Transactional
+    void deletedBookFileForce(int id);
+
     void deletedAllBookFiles();
 
 }
diff --git a/JavaProject/demo/src/main/java/com/example/main/service/books/ServiceBookSearchImpl.java b/JavaProject/demo/src/main/java/com/example/main/service/books/ServiceBookSearchImpl.java
index 9eed329..b262d32 100644
--- a/JavaProject/demo/src/main/java/com/example/main/service/books/ServiceBookSearchImpl.java
+++ b/JavaProject/demo/src/main/java/com/example/main/service/books/ServiceBookSearchImpl.java
@@ -12,7 +12,6 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
 import java.util.List;
-import java.util.Optional;
 
 
 @Service
diff --git a/JavaProject/demo/src/main/java/com/example/main/service/files/ServiceBookFileImpl.java b/JavaProject/demo/src/main/java/com/example/main/service/files/ServiceBookFileImpl.java
index 06fb0a3..598fc7c 100644
--- a/JavaProject/demo/src/main/java/com/example/main/service/files/ServiceBookFileImpl.java
+++ b/JavaProject/demo/src/main/java/com/example/main/service/files/ServiceBookFileImpl.java
@@ -5,9 +5,9 @@ import com.example.main.entity.BookFile;
 import com.example.main.service.ServiceBookFile;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.util.List;
-import java.util.Optional;
 
 
 @Service
@@ -23,6 +23,11 @@ public class ServiceBookFileImpl implements ServiceBookFile {
         return repositoryBookFile.findAll();
     }
 
+    @Override
+    public List<BookFile> getBookFileById(Integer bookId) {
+        return repositoryBookFile.findByBook_Id(bookId);
+    }
+
 
     @Override
     public BookFile getBookFile(int id) {
@@ -39,6 +44,13 @@ public class ServiceBookFileImpl implements ServiceBookFile {
         repositoryBookFile.deleteById(id);
     }
 
+    @Override
+    @Transactional
+    public void deletedBookFileForce(int id) {
+        System.out.println("deleeting id  " + id);
+        repositoryBookFile.deleteByIdForce(id);
+    }
+
 
     @Override
     public void deletedAllBookFiles() {
-- 
2.34.1

